import os 
from dotenv import load_dotenv
load_dotenv()

from langgraph.graph import StateGraph , START , END
from langgraph.graph.message import add_messages
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage , AIMessage , SystemMessage
from typing import TypedDict , Annotated
from pydantic import BaseModel , Field

#define the state
class GraphState(TypedDict):
    messages : Annotated[list, add_messages]
    code_content : Annotated[str, None]
    quality_score : Annotated[int, None]
    num_words : Annotated[int, None]

model = ChatOpenAI(model="gpt-4.1-mini", temperature=0 , max_completion_tokens=500)

class GenerateCode(BaseModel):
    """ 
    Extract the generated code and the num of words in the code
    """
    code : str = Field(description="Generated software code")
    num_words : int = Field(description="Number of words in the generated code")

class EvaluateCode(BaseModel):
    """
    Evaluate the generated code and return the quality score and comments
    """
    comments : str = Field(description="Comments on the quality score")
    quality_score : int = Field(description="Quality score of the generated code between 0 and 100")

developer_structured_llm = model.with_structured_output(GenerateCode)
evaluator_structured_llm = model.with_structured_output(EvaluateCode)


# nodes definition

#set the initial state
def init(state):
    print("----------- Init node ------------")
    print("State: ", state)
    return {
        "messages": [] , 
        "quality_score": 0 , 
        "num_words": 0
    }

#create a developer node 
def generate_code(state):
    print("----------- Generate code node ------------")
    system_prompt = """You are a software developer. You are given a task to generate a software code.
    You will be given a task and you will need to generate a software code for the task.
    Respond in json format with the following keys:
    code: The generated software code
    num_words: The number of words in the generated code
    """

    human_message  = [msg for msg in state["messages"] if isinstance(msg, HumanMessage)]
    ai_message = [msg for msg in state["messages"] if isinstance(msg, AIMessage)]
    system_message = [SystemMessage(content=system_prompt)]
    messages = system_message + ai_message + human_message

    developer_output = developer_structured_llm.invoke(messages)

    print("Code generated by developer: ", developer_output.code)

    print("--------------- developer output ---------------")

    return {
        "messages": [developer_output.code] , 
        "num_words": developer_output.num_words,
        "code_content": developer_output.code
    }


def evaluate_code(state):
    print("----------- Evaluate code node ------------")
    system_prompt = """
    You are a high standard code reviewer. You will be given a code and you will need to evaluate the code and return the quality score and comments.
    The quality score should be between 0 and 100.
    Assess the structure , code quality and documentation of the code.
    Respond in json format with the following keys:
    comments: Comments on the quality score
    quality_score: Quality score of the generated code between 0 and 100
    """

    human_message  = [msg for msg in state["messages"] if isinstance(msg, HumanMessage)]
    ai_message = [msg for msg in state["messages"] if isinstance(msg, AIMessage)]
    system_message = [SystemMessage(content=system_prompt)]
    messages = system_message + ai_message + human_message

    evaluator_output = evaluator_structured_llm.invoke(messages)

    print("Code evaluated by evaluator: ", evaluator_output.comments)
    print("--------------- evaluator output ---------------")

    return {
        "comments": [evaluator_output.comments] , 
        "quality_score": evaluator_output.quality_score
    }

def summary(state):
    print("----------- Summary node ------------")
    print("Summary: ", state)
    return state


workflow = StateGraph(GraphState)
workflow.add_node("init" , init)
workflow.add_node("generate_code" , generate_code)
workflow.add_node("evaluate_code" , evaluate_code)
workflow.add_node("summary" , summary)
workflow.add_edge(START , "init")
workflow.add_edge("init" , "generate_code")
workflow.add_edge("generate_code" , "evaluate_code")
workflow.add_edge("evaluate_code" , "summary")
workflow.add_edge("summary" , END)
app = workflow.compile()


if __name__ == "__main__":

    while True:
        user_input = input("Enter your coding task: ")
        if user_input.lower() == "exit":
            break
        result = app.invoke({"messages": [HumanMessage(content=user_input)]})
        print("**************************")

        print(result)
    